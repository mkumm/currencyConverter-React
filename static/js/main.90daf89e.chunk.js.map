{"version":3,"sources":["components/CurrencyConverter.js","components/CurrentDate.js","components/ExchangeRate.js","components/App.js","serviceWorker.js","index.js"],"names":["CurrencyConverter","state","worth","myCurrency","WantedCurrency","myCurrencyCode","WantedCurrencyCode","result","handleChangeWorth","e","setState","target","value","handleChangeCurrency","name","codeSection","dataset","code","options","selectedIndex","handleSubmit","preventDefault","convertedWorth","parseInt","toFixed","console","log","this","props","NBPcurrencyList","currency","mid","concat","map","option","key","data-code","className","onSubmit","htmlFor","id","type","onChange","React","Component","CurrentDate","dateCurrent","Date","getDate","getMonth","getFullYear","ExchangeRate","tBody","item","index","App","currencyList","fetch","then","response","json","data","rates","prevState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.90daf89e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./CurrencyConverter.css\";\r\n\r\nclass CurrencyConverter extends React.Component {\r\n  state = {\r\n    worth: \"\",\r\n    myCurrency: \"1\",\r\n    WantedCurrency: \"1\",\r\n    myCurrencyCode: \"PL\",\r\n    WantedCurrencyCode: \"PL\",\r\n    result: \"\"\r\n  };\r\n  handleChangeWorth = e => {\r\n    this.setState({\r\n      worth: e.target.value\r\n    });\r\n  };\r\n  handleChangeCurrency = e => {\r\n    const value = e.target.value;\r\n    const name = e.target.name;\r\n    const codeSection = e.target.dataset.code;\r\n    const code = e.target.options[e.target.selectedIndex].dataset.code;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n      [codeSection]: code\r\n    });\r\n  };\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const convertedWorth = (\r\n      (parseInt(this.state.worth) * parseInt(this.state.myCurrency)) /\r\n      parseInt(this.state.WantedCurrency)\r\n    ).toFixed(2);\r\n    const result = `${this.state.worth} ${this.state.myCurrencyCode} = ${convertedWorth} ${this.state.WantedCurrencyCode} `;\r\n    this.setState({\r\n      result: result\r\n    });\r\n  };\r\n\r\n  render() {\r\n    console.log(this.props.NBPcurrencyList);\r\n    const Plcurrency = [{ currency: \"zloty polski\", code: \"PL\", mid: 1 }];\r\n    const NBPcurrencyList = this.props.NBPcurrencyList;\r\n\r\n    const PLNBPcurrencyList = Plcurrency.concat(NBPcurrencyList);\r\n\r\n    const options = PLNBPcurrencyList.map(option => (\r\n      <option\r\n        key={option.code}\r\n        value={option.mid.toFixed(4)}\r\n        data-code={option.code}\r\n      >\r\n        {option.code} {option.currency}\r\n      </option>\r\n    ));\r\n\r\n    return (\r\n      <div className=\"CurrencyConverterBox\">\r\n        <h1>PRZELICZNIK WALUT</h1>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label htmlFor=\"worth\">\r\n            <p>Wartość:</p>\r\n            <br />\r\n            <input\r\n              id=\"worth\"\r\n              name=\"worth\"\r\n              type=\"number\"\r\n              value={this.state.worth}\r\n              onChange={this.handleChangeWorth}\r\n            />\r\n          </label>\r\n          <label htmlFor=\"myCurrency\">\r\n            <p>Mam:</p>\r\n            <br />\r\n            <select\r\n              id=\"myCurrency\"\r\n              name=\"myCurrency\"\r\n              data-code=\"myCurrencyCode\"\r\n              value={this.state.myCurrency}\r\n              onChange={this.handleChangeCurrency}\r\n            >\r\n              {options}\r\n            </select>\r\n          </label>\r\n          <label htmlFor=\"WantedCurrency\">\r\n            <p>Chcę otrzymać:</p>\r\n            <br />\r\n            <select\r\n              id=\"WantedCurrency\"\r\n              name=\"WantedCurrency\"\r\n              data-code=\"WantedCurrencyCode\"\r\n              value={this.state.WantedCurrency}\r\n              onChange={this.handleChangeCurrency}\r\n            >\r\n              {options}\r\n            </select>\r\n          </label>\r\n          <button>PRZELICZ</button>\r\n        </form>\r\n        <div className=\"result\">\r\n          <p>{this.state.result}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default CurrencyConverter;\r\n","import React from \"react\";\r\nimport \"./CurrentDate.css\";\r\n\r\nconst CurrentDate = () => {\r\n  let dateCurrent = new Date();\r\n  let dateCurrentFormat = ` na dzień: \r\n  ${\r\n    dateCurrent.getDate() <= 9\r\n      ? `0${dateCurrent.getDate()}`\r\n      : dateCurrent.getDate()\r\n  }-${\r\n    dateCurrent.getMonth() + 1 <= 9\r\n      ? `0${dateCurrent.getMonth() + 1}`\r\n      : dateCurrent.getMonth() + 1\r\n  }-${dateCurrent.getFullYear()}`;\r\n  return dateCurrentFormat;\r\n};\r\n\r\nexport default CurrentDate;\r\n","import React from \"react\";\r\nimport \"./ExchangeRate.css\";\r\nimport CurrentDate from \"./CurrentDate.js\";\r\n\r\nconst ExchangeRate = props => {\r\n  const tBody = props.NBPcurrencyList.map((item, index) => (\r\n    <tr>\r\n      <td key={`${item.code}${index}`}>{item.code}</td>\r\n      <td key={`${item.currency}${index}`}>{item.currency}</td>\r\n      <td key={`${item.mid}${index}`}>{item.mid.toFixed(4)}</td>\r\n    </tr>\r\n  ));\r\n  console.log(tBody);\r\n  return (\r\n    <div className=\"ExchangeRate\">\r\n      <h1>\r\n        KURS WALUT{\" \"}\r\n        <span className=\"CurrentDate\">\r\n          <CurrentDate />\r\n        </span>\r\n      </h1>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Kod</th>\r\n            <th>Nazwa</th>\r\n            <th>Średni kurs</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{tBody}</tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExchangeRate;\r\n","import React from \"react\";\nimport CurrencyConverter from \"./CurrencyConverter.js\";\nimport ExchangeRate from \"./ExchangeRate.js\";\nimport \"./App.css\";\n\nconst API = \"http://api.nbp.pl/api/exchangerates/tables/a/\";\n\nclass App extends React.Component {\n  state = {\n    currencyList: []\n  };\n\n  componentDidMount() {\n    fetch(API)\n      .then(response => response.json())\n      .then(data => {\n        const NBPcurrencyList = data[0].rates;\n\n        this.setState(prevState => ({\n          currencyList: prevState.currencyList.concat(NBPcurrencyList)\n        }));\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <CurrencyConverter NBPcurrencyList={this.state.currencyList} />\n        <ExchangeRate NBPcurrencyList={this.state.currencyList} />\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}